{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\surendra puri\\\\OneDrive\\\\Documents\\\\Desktop\\\\AnalyzedByIITIANS\\\\client\\\\src\\\\pages\\\\resetPasswordPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ResetPasswordPage() {\n  _s();\n  const {\n    id,\n    token\n  } = useParams();\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  // Function to validate strong password\n  const isStrongPassword = password => {\n    const strongPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n    return strongPasswordRegex.test(password);\n  };\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    // Check if passwords match\n    if (newPassword !== confirmPassword) {\n      setError(\"Passwords do not match!\");\n      return;\n    }\n\n    // Check if password is strong\n    if (!isStrongPassword(newPassword)) {\n      setError(\"Password must be at least 8 characters long, include an uppercase letter, a lowercase letter, a number, and a special character.\");\n      return;\n    }\n    try {\n      const response = await fetch(`http://localhost:4050/reset-password/${id}/${token}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          newPassword\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessage(data.message);\n        setError(\"\");\n      } else {\n        setError(data.error);\n        setMessage(\"\");\n      }\n    } catch (err) {\n      setError(\"An error occurred while resetting the password.\");\n      setMessage(\"\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Enter your new password\",\n        value: newPassword,\n        onChange: e => setNewPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Confirm your new password\",\n        value: confirmPassword,\n        onChange: e => setConfirmPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"green\"\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(ResetPasswordPage, \"Ej9wCLGxdFtl3IMGvchyHDjEwlo=\", false, function () {\n  return [useParams];\n});\n_c = ResetPasswordPage;\nvar _c;\n$RefreshReg$(_c, \"ResetPasswordPage\");","map":{"version":3,"names":["React","useState","useParams","jsxDEV","_jsxDEV","ResetPasswordPage","_s","id","token","newPassword","setNewPassword","confirmPassword","setConfirmPassword","message","setMessage","error","setError","isStrongPassword","password","strongPasswordRegex","test","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","style","color","_c","$RefreshReg$"],"sources":["C:/Users/surendra puri/OneDrive/Documents/Desktop/AnalyzedByIITIANS/client/src/pages/resetPasswordPage.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function ResetPasswordPage() {\r\n  const { id, token } = useParams();\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  // Function to validate strong password\r\n  const isStrongPassword = (password) => {\r\n    const strongPasswordRegex =\r\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n    return strongPasswordRegex.test(password);\r\n  };\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    // Check if passwords match\r\n    if (newPassword !== confirmPassword) {\r\n      setError(\"Passwords do not match!\");\r\n      return;\r\n    }\r\n\r\n    // Check if password is strong\r\n    if (!isStrongPassword(newPassword)) {\r\n      setError(\r\n        \"Password must be at least 8 characters long, include an uppercase letter, a lowercase letter, a number, and a special character.\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:4050/reset-password/${id}/${token}`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ newPassword }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setMessage(data.message);\r\n        setError(\"\");\r\n      } else {\r\n        setError(data.error);\r\n        setMessage(\"\");\r\n      }\r\n    } catch (err) {\r\n      setError(\"An error occurred while resetting the password.\");\r\n      setMessage(\"\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <h1>Reset Password</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Enter your new password\"\r\n          value={newPassword}\r\n          onChange={(e) => setNewPassword(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Confirm your new password\"\r\n          value={confirmPassword}\r\n          onChange={(e) => setConfirmPassword(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\">Reset Password</button>\r\n      </form>\r\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n      {message && <p style={{ color: \"green\" }}>{message}</p>}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}