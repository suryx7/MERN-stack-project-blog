{"ast":null,"code":"// import { useContext, useEffect, useState } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import { UserContext } from \"../components/UserContext\";\n\n// export default function CommentPage() {\n//   const { id } = useParams(); // Post ID from the URL\n//   const [comments, setComments] = useState([]);\n//   const [newComment, setNewComment] = useState(\"\");\n//   const [hoveredStar, setHoveredStar] = useState(0); // For hover effect on stars\n//   const [newRating, setNewRating] = useState(0);\n//   const { userInfo } = useContext(UserContext);\n\n//   useEffect(() => {\n//     // Fetch comments for the specific post\n//     fetch(`http://localhost:4050/post/${id}/comments`)\n//       .then((response) => response.json())\n//       .then((data) => setComments(data));\n//   }, [id]);\n\n//   async function addCommentAndRating() {\n//     if (!newComment.trim() && newRating === 0) {\n//       alert(\"Please provide a comment or rating.\");\n//       return;\n//     }\n\n//     const response = await fetch(`http://localhost:4050/post/${id}/comments`, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       credentials: \"include\",\n//       body: JSON.stringify({ text: newComment, rating: newRating }),\n//     });\n\n//     if (response.ok) {\n//       const addedComment = await response.json();\n//       setComments([...comments, addedComment]);\n//       setNewComment(\"\");\n//       setNewRating(0);\n//     } else {\n//       alert(\"Failed to add comment or rating.\");\n//     }\n//   }\n\n//   async function likeComment(commentId) {\n//     const response = await fetch(`http://localhost:4050/post/${id}/comments/${commentId}/like`, {\n//       method: \"POST\",\n//       credentials: \"include\",\n//     });\n\n//     if (response.ok) {\n//       const updatedComment = await response.json();\n//       setComments(\n//         comments.map((comment) => (comment._id === commentId ? updatedComment : comment))\n//       );\n//     } else {\n//       alert(\"Failed to like the comment.\");\n//     }\n//   }\n\n//   async function editComment(commentId, newText, newRating) {\n//     const response = await fetch(`http://localhost:4050/post/${id}/comments/${commentId}`, {\n//       method: \"PUT\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       credentials: \"include\",\n//       body: JSON.stringify({ text: newText, rating: newRating }),\n//     });\n\n//     if (response.ok) {\n//       const updatedComment = await response.json();\n//       setComments(\n//         comments.map((comment) => (comment._id === commentId ? updatedComment : comment))\n//       );\n//     } else {\n//       alert(\"Failed to update the comment.\");\n//     }\n//   }\n\n//   return (\n//     <div className=\"comment-section\">\n//       <h2>Comments & Ratings</h2>\n//       <div className=\"comment-input\">\n//         <textarea\n//           placeholder=\"Write a comment...\"\n//           value={newComment}\n//           onChange={(e) => setNewComment(e.target.value)}\n//         ></textarea>\n//         <div className=\"rating-input\">\n//           <span>Rate: </span>\n//           {[1, 2, 3, 4, 5].map((star) => (\n//             <button\n//               key={star}\n//               onClick={() => setNewRating(star)}\n//               onMouseEnter={() => setHoveredStar(star)}\n//               onMouseLeave={() => setHoveredStar(0)}\n//               className={star <= (hoveredStar || newRating) ? \"active-star\" : \"\"}\n//             >\n//               ‚òÖ\n//             </button>\n//           ))}\n//         </div>\n//         <button onClick={addCommentAndRating}>Submit</button>\n//       </div>\n//       <div className=\"comments-list\">\n//         {comments.map((comment) => (\n//           <div key={comment._id} className=\"comment-item\">\n//             <div className=\"comment-header\">\n//               <strong>@{comment.author.username}</strong>{\" \"}\n//               <small>{new Date(comment.createdAt).toLocaleString()}</small>\n//             </div>\n//             <p>{comment.text}</p>\n//             <div className=\"rating-display\">\n//               <span>Rating: </span>\n//               {[1, 2, 3, 4, 5].map((star) => (\n//                 <span\n//                   key={star}\n//                   className={star <= (comment.rating || 0) ? \"active-star\" : \"\"}\n//                 >\n//                   ‚òÖ\n//                 </span>\n//               ))}\n//             </div>\n//             <div className=\"comment-actions\">\n//               <button onClick={() => likeComment(comment._id)}>\n//                 üëç {comment.likes || 0}\n//               </button>\n//               {userInfo.id === comment.author._id && (\n//                 <button\n//                   onClick={() =>\n//                     editComment(\n//                       comment._id,\n//                       prompt(\"Edit your comment:\", comment.text),\n//                       parseInt(prompt(\"Edit your rating:\", comment.rating || 0))\n//                     )\n//                   }\n//                 >\n//                   Edit\n//                 </button>\n//               )}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/surendra puri/OneDrive/Documents/Desktop/AnalyzedByIITIANS/client/src/pages/commentPage.js"],"sourcesContent":["// import { useContext, useEffect, useState } from \"react\";\r\n// import { useParams } from \"react-router-dom\";\r\n// import { UserContext } from \"../components/UserContext\";\r\n\r\n// export default function CommentPage() {\r\n//   const { id } = useParams(); // Post ID from the URL\r\n//   const [comments, setComments] = useState([]);\r\n//   const [newComment, setNewComment] = useState(\"\");\r\n//   const [hoveredStar, setHoveredStar] = useState(0); // For hover effect on stars\r\n//   const [newRating, setNewRating] = useState(0);\r\n//   const { userInfo } = useContext(UserContext);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch comments for the specific post\r\n//     fetch(`http://localhost:4050/post/${id}/comments`)\r\n//       .then((response) => response.json())\r\n//       .then((data) => setComments(data));\r\n//   }, [id]);\r\n\r\n//   async function addCommentAndRating() {\r\n//     if (!newComment.trim() && newRating === 0) {\r\n//       alert(\"Please provide a comment or rating.\");\r\n//       return;\r\n//     }\r\n\r\n//     const response = await fetch(`http://localhost:4050/post/${id}/comments`, {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       credentials: \"include\",\r\n//       body: JSON.stringify({ text: newComment, rating: newRating }),\r\n//     });\r\n\r\n//     if (response.ok) {\r\n//       const addedComment = await response.json();\r\n//       setComments([...comments, addedComment]);\r\n//       setNewComment(\"\");\r\n//       setNewRating(0);\r\n//     } else {\r\n//       alert(\"Failed to add comment or rating.\");\r\n//     }\r\n//   }\r\n\r\n//   async function likeComment(commentId) {\r\n//     const response = await fetch(`http://localhost:4050/post/${id}/comments/${commentId}/like`, {\r\n//       method: \"POST\",\r\n//       credentials: \"include\",\r\n//     });\r\n\r\n//     if (response.ok) {\r\n//       const updatedComment = await response.json();\r\n//       setComments(\r\n//         comments.map((comment) => (comment._id === commentId ? updatedComment : comment))\r\n//       );\r\n//     } else {\r\n//       alert(\"Failed to like the comment.\");\r\n//     }\r\n//   }\r\n\r\n//   async function editComment(commentId, newText, newRating) {\r\n//     const response = await fetch(`http://localhost:4050/post/${id}/comments/${commentId}`, {\r\n//       method: \"PUT\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       credentials: \"include\",\r\n//       body: JSON.stringify({ text: newText, rating: newRating }),\r\n//     });\r\n\r\n//     if (response.ok) {\r\n//       const updatedComment = await response.json();\r\n//       setComments(\r\n//         comments.map((comment) => (comment._id === commentId ? updatedComment : comment))\r\n//       );\r\n//     } else {\r\n//       alert(\"Failed to update the comment.\");\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"comment-section\">\r\n//       <h2>Comments & Ratings</h2>\r\n//       <div className=\"comment-input\">\r\n//         <textarea\r\n//           placeholder=\"Write a comment...\"\r\n//           value={newComment}\r\n//           onChange={(e) => setNewComment(e.target.value)}\r\n//         ></textarea>\r\n//         <div className=\"rating-input\">\r\n//           <span>Rate: </span>\r\n//           {[1, 2, 3, 4, 5].map((star) => (\r\n//             <button\r\n//               key={star}\r\n//               onClick={() => setNewRating(star)}\r\n//               onMouseEnter={() => setHoveredStar(star)}\r\n//               onMouseLeave={() => setHoveredStar(0)}\r\n//               className={star <= (hoveredStar || newRating) ? \"active-star\" : \"\"}\r\n//             >\r\n//               ‚òÖ\r\n//             </button>\r\n//           ))}\r\n//         </div>\r\n//         <button onClick={addCommentAndRating}>Submit</button>\r\n//       </div>\r\n//       <div className=\"comments-list\">\r\n//         {comments.map((comment) => (\r\n//           <div key={comment._id} className=\"comment-item\">\r\n//             <div className=\"comment-header\">\r\n//               <strong>@{comment.author.username}</strong>{\" \"}\r\n//               <small>{new Date(comment.createdAt).toLocaleString()}</small>\r\n//             </div>\r\n//             <p>{comment.text}</p>\r\n//             <div className=\"rating-display\">\r\n//               <span>Rating: </span>\r\n//               {[1, 2, 3, 4, 5].map((star) => (\r\n//                 <span\r\n//                   key={star}\r\n//                   className={star <= (comment.rating || 0) ? \"active-star\" : \"\"}\r\n//                 >\r\n//                   ‚òÖ\r\n//                 </span>\r\n//               ))}\r\n//             </div>\r\n//             <div className=\"comment-actions\">\r\n//               <button onClick={() => likeComment(comment._id)}>\r\n//                 üëç {comment.likes || 0}\r\n//               </button>\r\n//               {userInfo.id === comment.author._id && (\r\n//                 <button\r\n//                   onClick={() =>\r\n//                     editComment(\r\n//                       comment._id,\r\n//                       prompt(\"Edit your comment:\", comment.text),\r\n//                       parseInt(prompt(\"Edit your rating:\", comment.rating || 0))\r\n//                     )\r\n//                   }\r\n//                 >\r\n//                   Edit\r\n//                 </button>\r\n//               )}\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}