{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\surendra puri\\\\OneDrive\\\\Documents\\\\Desktop\\\\AnalyzedByIITIANS\\\\client\\\\src\\\\pages\\\\commentPage.js\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { UserContext } from \"../components/UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CommentPage() {\n  _s();\n  const {\n    id\n  } = useParams(); // Post ID from the URL\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n  const [hoveredStar, setHoveredStar] = useState(0); // For hover effect on stars\n  const [newRating, setNewRating] = useState(0);\n  const {\n    userInfo\n  } = useContext(UserContext);\n  useEffect(() => {\n    // Fetch comments for the specific post\n    fetch(`http://localhost:4050/post/${id}/comments`).then(response => response.json()).then(data => setComments(data));\n  }, [id]);\n  async function addCommentAndRating() {\n    if (!newComment.trim() && newRating === 0) {\n      alert(\"Please provide a comment or rating.\");\n      return;\n    }\n    const response = await fetch(`http://localhost:4050/post/${id}/comments`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      body: JSON.stringify({\n        text: newComment,\n        rating: newRating\n      })\n    });\n    if (response.ok) {\n      const addedComment = await response.json();\n      setComments([...comments, addedComment]);\n      setNewComment(\"\");\n      setNewRating(0);\n    } else {\n      alert(\"Failed to add comment or rating.\");\n    }\n  }\n  async function likeComment(commentId) {\n    const response = await fetch(`http://localhost:4050/post/${id}/comments/${commentId}/like`, {\n      method: \"POST\",\n      credentials: \"include\"\n    });\n    if (response.ok) {\n      const updatedComment = await response.json();\n      setComments(comments.map(comment => comment._id === commentId ? updatedComment : comment));\n    } else {\n      alert(\"Failed to like the comment.\");\n    }\n  }\n  async function editComment(commentId, newText, newRating) {\n    const response = await fetch(`http://localhost:4050/post/${id}/comments/${commentId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      body: JSON.stringify({\n        text: newText,\n        rating: newRating\n      })\n    });\n    if (response.ok) {\n      const updatedComment = await response.json();\n      setComments(comments.map(comment => comment._id === commentId ? updatedComment : comment));\n    } else {\n      alert(\"Failed to update the comment.\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments & Ratings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Write a comment...\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rating-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Rate: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), [1, 2, 3, 4, 5].map(star => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setNewRating(star),\n          onMouseEnter: () => setHoveredStar(star),\n          onMouseLeave: () => setHoveredStar(0),\n          className: star <= (hoveredStar || newRating) ? \"active-star\" : \"\",\n          children: \"\\u2605\"\n        }, star, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addCommentAndRating,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-list\",\n      children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [\"@\", comment.author.username]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"small\", {\n            children: new Date(comment.createdAt).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: comment.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rating-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Rating: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this), [1, 2, 3, 4, 5].map(star => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: star <= (comment.rating || 0) ? \"active-star\" : \"\",\n            children: \"\\u2605\"\n          }, star, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => likeComment(comment._id),\n            children: [\"\\uD83D\\uDC4D \", comment.likes || 0]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this), userInfo.id === comment.author._id && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => editComment(comment._id, prompt(\"Edit your comment:\", comment.text), parseInt(prompt(\"Edit your rating:\", comment.rating || 0))),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)]\n      }, comment._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(CommentPage, \"MV8ncFLAB6HO8bjLm0Y6t23pP/U=\", false, function () {\n  return [useParams];\n});\n_c = CommentPage;\nvar _c;\n$RefreshReg$(_c, \"CommentPage\");","map":{"version":3,"names":["useContext","useEffect","useState","useParams","UserContext","jsxDEV","_jsxDEV","CommentPage","_s","id","comments","setComments","newComment","setNewComment","hoveredStar","setHoveredStar","newRating","setNewRating","userInfo","fetch","then","response","json","data","addCommentAndRating","trim","alert","method","headers","credentials","body","JSON","stringify","text","rating","ok","addedComment","likeComment","commentId","updatedComment","map","comment","_id","editComment","newText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","star","onClick","onMouseEnter","onMouseLeave","author","username","Date","createdAt","toLocaleString","likes","prompt","parseInt","_c","$RefreshReg$"],"sources":["C:/Users/surendra puri/OneDrive/Documents/Desktop/AnalyzedByIITIANS/client/src/pages/commentPage.js"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { UserContext } from \"../components/UserContext\";\r\n\r\nexport default function CommentPage() {\r\n  const { id } = useParams(); // Post ID from the URL\r\n  const [comments, setComments] = useState([]);\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const [hoveredStar, setHoveredStar] = useState(0); // For hover effect on stars\r\n  const [newRating, setNewRating] = useState(0);\r\n  const { userInfo } = useContext(UserContext);\r\n\r\n  useEffect(() => {\r\n    // Fetch comments for the specific post\r\n    fetch(`http://localhost:4050/post/${id}/comments`)\r\n      .then((response) => response.json())\r\n      .then((data) => setComments(data));\r\n  }, [id]);\r\n\r\n  async function addCommentAndRating() {\r\n    if (!newComment.trim() && newRating === 0) {\r\n      alert(\"Please provide a comment or rating.\");\r\n      return;\r\n    }\r\n\r\n    const response = await fetch(`http://localhost:4050/post/${id}/comments`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      credentials: \"include\",\r\n      body: JSON.stringify({ text: newComment, rating: newRating }),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const addedComment = await response.json();\r\n      setComments([...comments, addedComment]);\r\n      setNewComment(\"\");\r\n      setNewRating(0);\r\n    } else {\r\n      alert(\"Failed to add comment or rating.\");\r\n    }\r\n  }\r\n\r\n  async function likeComment(commentId) {\r\n    const response = await fetch(`http://localhost:4050/post/${id}/comments/${commentId}/like`, {\r\n      method: \"POST\",\r\n      credentials: \"include\",\r\n    });\r\n\r\n    if (response.ok) {\r\n      const updatedComment = await response.json();\r\n      setComments(\r\n        comments.map((comment) => (comment._id === commentId ? updatedComment : comment))\r\n      );\r\n    } else {\r\n      alert(\"Failed to like the comment.\");\r\n    }\r\n  }\r\n\r\n  async function editComment(commentId, newText, newRating) {\r\n    const response = await fetch(`http://localhost:4050/post/${id}/comments/${commentId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      credentials: \"include\",\r\n      body: JSON.stringify({ text: newText, rating: newRating }),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const updatedComment = await response.json();\r\n      setComments(\r\n        comments.map((comment) => (comment._id === commentId ? updatedComment : comment))\r\n      );\r\n    } else {\r\n      alert(\"Failed to update the comment.\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"comment-section\">\r\n      <h2>Comments & Ratings</h2>\r\n      <div className=\"comment-input\">\r\n        <textarea\r\n          placeholder=\"Write a comment...\"\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n        ></textarea>\r\n        <div className=\"rating-input\">\r\n          <span>Rate: </span>\r\n          {[1, 2, 3, 4, 5].map((star) => (\r\n            <button\r\n              key={star}\r\n              onClick={() => setNewRating(star)}\r\n              onMouseEnter={() => setHoveredStar(star)}\r\n              onMouseLeave={() => setHoveredStar(0)}\r\n              className={star <= (hoveredStar || newRating) ? \"active-star\" : \"\"}\r\n            >\r\n              ★\r\n            </button>\r\n          ))}\r\n        </div>\r\n        <button onClick={addCommentAndRating}>Submit</button>\r\n      </div>\r\n      <div className=\"comments-list\">\r\n        {comments.map((comment) => (\r\n          <div key={comment._id} className=\"comment-item\">\r\n            <div className=\"comment-header\">\r\n              <strong>@{comment.author.username}</strong>{\" \"}\r\n              <small>{new Date(comment.createdAt).toLocaleString()}</small>\r\n            </div>\r\n            <p>{comment.text}</p>\r\n            <div className=\"rating-display\">\r\n              <span>Rating: </span>\r\n              {[1, 2, 3, 4, 5].map((star) => (\r\n                <span\r\n                  key={star}\r\n                  className={star <= (comment.rating || 0) ? \"active-star\" : \"\"}\r\n                >\r\n                  ★\r\n                </span>\r\n              ))}\r\n            </div>\r\n            <div className=\"comment-actions\">\r\n              <button onClick={() => likeComment(comment._id)}>\r\n                👍 {comment.likes || 0}\r\n              </button>\r\n              {userInfo.id === comment.author._id && (\r\n                <button\r\n                  onClick={() =>\r\n                    editComment(\r\n                      comment._id,\r\n                      prompt(\"Edit your comment:\", comment.text),\r\n                      parseInt(prompt(\"Edit your rating:\", comment.rating || 0))\r\n                    )\r\n                  }\r\n                >\r\n                  Edit\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}